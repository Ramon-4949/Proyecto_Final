@page "/Account/Register" 
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Proyecto_Final.Components.Account
@using Proyecto_Final.Data
@using Proyecto_Final.Models.Usuario
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Crear Cuenta - Golazo Store</PageTitle>

<div class="container mx-auto px-4 py-12">
    <h1 class="text-3xl font-bold text-center mb-8 text-gray-800">Crear Cuenta</h1>
    <p class="text-center text-gray-600 mb-10">
        Únete a Golazo Store para disfrutar de una mejor experiencia de compra.
    </p>

    <div class="max-w-3xl mx-auto bg-white p-8 rounded-xl shadow-md border border-gray-200">
        <h2 class="text-2xl font-bold mb-6 text-gray-800">Información personal y de inicio de sesión</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                <strong class="font-bold">Error:</strong>
                <span class="block sm:inline">@errorMessage</span>
            </div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
                <strong class="font-bold">Éxito:</strong>
                <span class="block sm:inline">@successMessage</span>
            </div>
        }

        <EditForm Model="Input" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-600 mb-4" />

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Informacion personal -->
                <div>
                    <h3 class="text-xl font-semibold mb-4 text-gray-700">Información personal</h3>
                    <div class="mb-4">
                        <label for="Input.Nombre" class="block text-sm font-medium mb-1">Nombre *</label>
                        <InputText id="Input.Nombre" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500" @bind-Value="Input.Nombre" placeholder="Tu nombre" />
                        <ValidationMessage For="() => Input.Nombre" class="text-red-500 text-sm" />
                    </div>
                    <div class="mb-4">
                        <label for="Input.Apellido" class="block text-sm font-medium mb-1">Apellidos *</label>
                        <InputText id="Input.Apellido" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500" @bind-Value="Input.Apellido" placeholder="Tus apellidos" />
                        <ValidationMessage For="() => Input.Apellido" class="text-red-500 text-sm" />
                    </div>
                    <div class="flex items-center mb-4">
                        <InputCheckbox id="Input.SubscribeToNewsletter" class="mr-2" @bind-Value="Input.SubscribeToNewsletter" />
                        <label for="Input.SubscribeToNewsletter" class="text-sm font-medium">Quiero suscribirme al newsletter</label>
                    </div>
                </div>

                <!-- Información de inicio de sesión -->
                <div>
                    <h3 class="text-xl font-semibold mb-4 text-gray-700">Información de inicio de sesión</h3>
                    <div class="mb-4">
                        <label for="Input.Email" class="block text-sm font-medium mb-1">Correo electrónico *</label>
                        <InputText id="Input.Email" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500" autocomplete="username" aria-required="true" placeholder="nombre@ejemplo.com" @bind-Value="Input.Email" />
                        <ValidationMessage For="() => Input.Email" class="text-red-500 text-sm" />
                    </div>
                    <div class="mb-4">
                        <label for="Input.Password" class="block text-sm font-medium mb-1">Contraseña *</label>
                        <InputText type="password" id="Input.Password" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500" autocomplete="new-password" aria-required="true" placeholder="••••••••" @bind-Value="Input.Password" />
                        <ValidationMessage For="() => Input.Password" class="text-red-500 text-sm" />
                    </div>
                    <div class="mb-4">
                        <label for="Input.ConfirmPassword" class="block text-sm font-medium mb-1">Confirmar contraseña *</label>
                        <InputText type="password" id="Input.ConfirmPassword" class="w-full px-4 py-2 border rounded-lg focus:ring-yellow-500 focus:border-yellow-500" autocomplete="new-password" aria-required="true" placeholder="••••••••" @bind-Value="Input.ConfirmPassword" />
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-red-500 text-sm" />
                    </div>
                </div>
            </div>

            <div class="flex justify-between items-center mt-8">
                <NavLink href="/Account/Login" class="text-blue-600 hover:underline">
                    &larr; Ya tengo cuenta
                </NavLink>
                <button type="submit" class="bg-yellow-500 hover:bg-yellow-600 text-black font-bold py-3 px-8 rounded-lg transition-colors duration-300">
                    CREAR CUENTA
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string errorMessage;
    private string successMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task RegisterUser()
    {
        errorMessage = string.Empty; 
        successMessage = string.Empty; 

        var user = CreateUser();

        // Asignar Nombre y Apellido al usuario
        user.Nombre = Input.Nombre;
        user.Apellido = Input.Apellido;
        user.NombreCompleto = $"{Input.Nombre} {Input.Apellido}";
        user.FechaRegistro = DateTime.UtcNow; // Establecer la fecha de registro

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {
            Logger.LogInformation("User created a new account with password.");

            // Asignar el rol "Cliente" por defecto al nuevo usuario
            if (!await UserManager.IsInRoleAsync(user, "Cliente"))
            {
                await UserManager.AddToRoleAsync(user, "Cliente");
                Logger.LogInformation($"User {user.Email} assigned to role 'Cliente'.");
            }

            await SignInManager.SignInAsync(user, isPersistent: false);
            successMessage = "¡Tu cuenta ha sido creada con éxito! Redirigiendo a tu perfil...";
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/perfil"); // Redirige a la página de perfil
        }
        else
        {
            errorMessage = $"Error al crear la cuenta: {string.Join(", ", result.Errors.Select(error => error.Description))}";
            Logger.LogError("Error creating user: {Errors}", string.Join(", ", result.Errors.Select(e => e.Description)));
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating instance of ApplicationUser.");
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El nombre es obligatorio.")]
        [StringLength(100, ErrorMessage = "El nombre no puede exceder los 100 caracteres.")]
        public string Nombre { get; set; } = "";

        [Required(ErrorMessage = "El apellido es obligatorio.")]
        [StringLength(100, ErrorMessage = "El apellido no puede exceder los 100 caracteres.")]
        public string Apellido { get; set; } = "";

        public bool SubscribeToNewsletter { get; set; }

        [Required(ErrorMessage = "El correo electrónico es obligatorio.")]
        [EmailAddress(ErrorMessage = "Formato de correo electrónico inválido.")]
        [Display(Name = "Correo electrónico")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        [StringLength(100, ErrorMessage = "La {0} debe tener al menos {2} y como máximo {1} caracteres de longitud.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Contraseña")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirmar contraseña")]
        [Compare("Password", ErrorMessage = "La contraseña y la confirmación de la contraseña no coinciden.")]
        public string ConfirmPassword { get; set; } = "";
    }
}