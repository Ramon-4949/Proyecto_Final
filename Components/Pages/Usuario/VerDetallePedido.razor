@page "/pedidos/detalle/{id:int}"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using Proyecto_Final.Data
@using Proyecto_Final.Models.Pedidos
@using Proyecto_Final.Models.Producto
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager NavManager
@inject ApplicationDbContext DbContext
@inject ILogger<DetallePedido> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (pedido == null)
{
    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-yellow-500"></div>
        </div>
    }
    else
    {
        <div class="text-center text-gray-500 py-10">
            <h1 class="text-2xl font-bold">Pedido no encontrado</h1>
            <p class="mt-2">El pedido con el ID @Id no existe o no tienes permiso para verlo.</p>
            <a href="/perfil" class="mt-4 inline-block text-yellow-600 hover:underline">Volver a mis pedidos</a>
        </div>
    }
}
else
{
    <div class="container mx-auto px-4 py-8 max-w-7xl">
        <div class="bg-white p-8 rounded-xl shadow-md border border-gray-200">
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-3xl font-bold text-gray-800">Detalle del Pedido #@pedido.Id</h1>
                <span class="px-4 py-1 rounded-full text-sm font-semibold @GetEstadoBadgeClass(pedido.Estado)">
                    @pedido.Estado
                </span>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                <div>
                    <h2 class="text-lg font-bold text-gray-800 mb-2">Información del Cliente</h2>
                    <p class="text-gray-600"><strong>Nombre:</strong> @(pedido.NombreEnvio + " " + pedido.ApellidoEnvio)</p>
                    <p class="text-gray-600"><strong>Email:</strong> @(pedido.Usuario?.Email ?? "No disponible")</p>
                    <p class="text-gray-600"><strong>Teléfono:</strong> @(pedido.TelefonoEnvio ?? "No especificado")</p>
                </div>
                <div>
                    <h2 class="text-lg font-bold text-gray-800 mb-2">Dirección de Envío</h2>
                    <p class="text-gray-600">@pedido.CalleEnvio</p>
                    <p class="text-gray-600">@(pedido.CiudadEnvio), @(pedido.EstadoEnvio) @(pedido.CodigoPostalEnvio)</p>
                    <p class="text-gray-600">@pedido.PaisEnvio</p>
                </div>
                <div>
                    <h2 class="text-lg font-bold text-gray-800 mb-2">Resumen del Pedido</h2>
                    <p class="text-gray-600"><strong>Fecha:</strong> @pedido.FechaPedido.ToString("dd/MM/yyyy HH:mm")</p>
                    <p class="text-gray-600"><strong>Subtotal:</strong> @subtotal.ToString("C")</p>
                    <p class="text-gray-600"><strong>Envío:</strong> Gratis</p>
                    <p class="text-xl font-bold text-gray-800 mt-2">Total: @pedido.Total.ToString("C")</p>
                </div>
            </div>

            <hr class="my-6 border-gray-200" />

            <h2 class="text-xl font-bold text-gray-800 mb-4">Productos del Pedido</h2>
            <div class="space-y-4">
                @foreach (var detalle in pedido.Detalles)
                {
                    <div class="flex items-center space-x-4 p-4 bg-gray-50 rounded-lg">
                        <img src="@(detalle.Producto?.ImagenUrl ?? "https://placehold.co/100x100/E0E0E0/6C757D?text=No+img")" alt="@(detalle.Producto?.Nombre)" class="w-16 h-16 object-cover rounded-md border border-gray-200" />
                        <div class="flex-grow">
                            <h3 class="text-lg font-semibold text-gray-800">@detalle.Producto?.Nombre</h3>
                            <p class="text-sm text-gray-500">Cantidad: @detalle.Cantidad</p>
                            <p class="text-sm text-gray-500">Precio Unitario: @detalle.PrecioUnitario.ToString("C")</p>
                        </div>
                        <span class="text-lg font-bold text-gray-800">@((detalle.Cantidad * detalle.PrecioUnitario).ToString("C"))</span>
                    </div>
                }
            </div>

            <div class="mt-8 flex justify-end">
                <button @onclick="NavigateBackToProfile" class="bg-black hover:bg-gray-800 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-300">
                    Volver a mis pedidos
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Pedido? pedido;
    private bool isLoading = true;
    private string? usuarioId;

    private decimal subtotal => pedido?.Detalles?.Sum(d => d.Cantidad * d.PrecioUnitario) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        usuarioId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(usuarioId))
        {
            NavManager.NavigateTo("/login");
            return;
        }

        try
        {
            pedido = await DbContext.Pedidos
                .Include(p => p.Detalles)
                .ThenInclude(d => d.Producto)
                .Include(p => p.Usuario)
                .FirstOrDefaultAsync(p => p.Id == Id && p.UsuarioId == usuarioId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar el detalle del pedido {Id} para el usuario {UsuarioId}", Id, usuarioId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetEstadoBadgeClass(string estado)
    {
        return estado switch
        {
            "Procesando" => "bg-yellow-100 text-yellow-800",
            "Enviado" => "bg-blue-100 text-blue-800",
            "Completado" => "bg-green-100 text-green-800",
            "Cancelado" => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private void NavigateBackToProfile()
    {
        NavManager.NavigateTo("/perfil");
    }
}